# Default is chart name
fullnameOverride:

image:
  repository: nsqio/nsq
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag:

imagePullSecrets: []

nsqlookupd:
  enabled: true

  fullnameOverride:

  replicaCount: 3

  priorityClassName:

  extraArgs: []

  podManagementPolicy: Parallel

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  serviceAccountName:

  nodeSelector: {}

  tolerations: []

  affinity: {}

nsqadmin:
  enabled: true

  fullnameOverride:

  replicaCount: 1

  priorityClassName:

  basePath: /

  extraArgs: []

  service:
    type: ClusterIP
    annotations:
    port: 4171
    nodePort:

  ingress:
    enabled: false
    ## @param nsqadmin.ingress.ingressClassName Set the ingerssClassName on the ingress record for k8s 1.18+
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    host:
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  serviceAccountName:

  nodeSelector: {}

  tolerations: []

  affinity: {}

nsqd:
  enabled: true

  fullnameOverride:

  replicaCount: 3

  priorityClassName:

  extraArgs: []

  podManagementPolicy: Parallel

  podAnnotations: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  serviceAccountName:

  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  service:
    type: ClusterIP
    annotations:

  persistence:
    enabled: true
    size: 1Gi
    storageClass: "-"
    accessModes:
      - ReadWriteOnce

## Prometheus Exporters / Metrics
##
metrics:
  enabled: false

  image:
    registry: docker.io
    repository: lovoo/nsq_exporter
    tag: 2.0.2
    pullPolicy: IfNotPresent
    pullSecrets: []

  args: []

  resources:
    limits: {}
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}
    #   cpu: 20m
    #   memory: 16Mi

  containerPort: 9117

  service:
    annotations:
      # Prometheus does not connect to this service directly,
      # instead it uses this port to connect to each target
      # of the service (each nsqd).
      # TODO: remove service and annotate pods instead?
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.containerPort }}"
      prometheus.io/path: "/metrics"
    type: ClusterIP
    ports:
      metrics: 9117
    extraPorts: []

  livenessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 30

  ## Prometheus Service Monitor
  ## ref: https://github.com/coreos/prometheus-operator
  ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using Prometheus Operator
    ##
    enabled: false
    ## @param metrics.serviceMonitor.namespace Namespace which Prometheus is running in
    ##
    namespace: ""
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
    ##
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
    ## e.g:
    ## scrapeTimeout: 30s
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping.
    ##
    relabelings: []
    ## @param metrics.serviceMonitor.metricRelabelings MetricsRelabelConfigs to apply to samples before ingestion.
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.labels Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    ##
    labels: {}
    ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
    ## ref: https://github.com/bitnami/charts/tree/master/bitnami/prometheus-operator#prometheus-configuration
    ##
    selector: {}
    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
    ##
    jobLabel: ""
